/*
 * chuk_check_core API
 * chuk_check_core API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.AttendDate;
import org.openapitools.client.model.MatchDate;
import org.openapitools.client.model.StadiumResponse;
import org.openapitools.client.model.TeamResponse;
import org.openapitools.client.model.VoteDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MatchResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-05T14:29:51.370708+09:00[Asia/Seoul]")
public class MatchResponse {
  public static final String SERIALIZED_NAME_MATCH_ID = "matchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private Long matchId;

  public static final String SERIALIZED_NAME_OTHER_TEAM_NAME = "otherTeamName";
  @SerializedName(SERIALIZED_NAME_OTHER_TEAM_NAME)
  private String otherTeamName;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private Boolean home;

  public static final String SERIALIZED_NAME_NOTICE = "notice";
  @SerializedName(SERIALIZED_NAME_NOTICE)
  private String notice;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATE("CREATE"),
    
    VOTE("VOTE"),
    
    ATTEND("ATTEND"),
    
    MATCH("MATCH"),
    
    FINISH("FINISH");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_MATCH_DATE = "matchDate";
  @SerializedName(SERIALIZED_NAME_MATCH_DATE)
  private MatchDate matchDate;

  public static final String SERIALIZED_NAME_VOTE_DATE = "voteDate";
  @SerializedName(SERIALIZED_NAME_VOTE_DATE)
  private VoteDate voteDate;

  public static final String SERIALIZED_NAME_ATTEND_DATE = "attendDate";
  @SerializedName(SERIALIZED_NAME_ATTEND_DATE)
  private AttendDate attendDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updatedDate";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private OffsetDateTime updatedDate;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private TeamResponse team;

  public static final String SERIALIZED_NAME_STADIUM = "stadium";
  @SerializedName(SERIALIZED_NAME_STADIUM)
  private StadiumResponse stadium;

  public MatchResponse() {
  }

  public MatchResponse matchId(Long matchId) {
    
    this.matchId = matchId;
    return this;
  }

   /**
   * Get matchId
   * @return matchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getMatchId() {
    return matchId;
  }


  public void setMatchId(Long matchId) {
    this.matchId = matchId;
  }


  public MatchResponse otherTeamName(String otherTeamName) {
    
    this.otherTeamName = otherTeamName;
    return this;
  }

   /**
   * Get otherTeamName
   * @return otherTeamName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOtherTeamName() {
    return otherTeamName;
  }


  public void setOtherTeamName(String otherTeamName) {
    this.otherTeamName = otherTeamName;
  }


  public MatchResponse home(Boolean home) {
    
    this.home = home;
    return this;
  }

   /**
   * Get home
   * @return home
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHome() {
    return home;
  }


  public void setHome(Boolean home) {
    this.home = home;
  }


  public MatchResponse notice(String notice) {
    
    this.notice = notice;
    return this;
  }

   /**
   * Get notice
   * @return notice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotice() {
    return notice;
  }


  public void setNotice(String notice) {
    this.notice = notice;
  }


  public MatchResponse status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public MatchResponse matchDate(MatchDate matchDate) {
    
    this.matchDate = matchDate;
    return this;
  }

   /**
   * Get matchDate
   * @return matchDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MatchDate getMatchDate() {
    return matchDate;
  }


  public void setMatchDate(MatchDate matchDate) {
    this.matchDate = matchDate;
  }


  public MatchResponse voteDate(VoteDate voteDate) {
    
    this.voteDate = voteDate;
    return this;
  }

   /**
   * Get voteDate
   * @return voteDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VoteDate getVoteDate() {
    return voteDate;
  }


  public void setVoteDate(VoteDate voteDate) {
    this.voteDate = voteDate;
  }


  public MatchResponse attendDate(AttendDate attendDate) {
    
    this.attendDate = attendDate;
    return this;
  }

   /**
   * Get attendDate
   * @return attendDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttendDate getAttendDate() {
    return attendDate;
  }


  public void setAttendDate(AttendDate attendDate) {
    this.attendDate = attendDate;
  }


  public MatchResponse createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public MatchResponse updatedDate(OffsetDateTime updatedDate) {
    
    this.updatedDate = updatedDate;
    return this;
  }

   /**
   * Get updatedDate
   * @return updatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedDate() {
    return updatedDate;
  }


  public void setUpdatedDate(OffsetDateTime updatedDate) {
    this.updatedDate = updatedDate;
  }


  public MatchResponse team(TeamResponse team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TeamResponse getTeam() {
    return team;
  }


  public void setTeam(TeamResponse team) {
    this.team = team;
  }


  public MatchResponse stadium(StadiumResponse stadium) {
    
    this.stadium = stadium;
    return this;
  }

   /**
   * Get stadium
   * @return stadium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StadiumResponse getStadium() {
    return stadium;
  }


  public void setStadium(StadiumResponse stadium) {
    this.stadium = stadium;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchResponse matchResponse = (MatchResponse) o;
    return Objects.equals(this.matchId, matchResponse.matchId) &&
        Objects.equals(this.otherTeamName, matchResponse.otherTeamName) &&
        Objects.equals(this.home, matchResponse.home) &&
        Objects.equals(this.notice, matchResponse.notice) &&
        Objects.equals(this.status, matchResponse.status) &&
        Objects.equals(this.matchDate, matchResponse.matchDate) &&
        Objects.equals(this.voteDate, matchResponse.voteDate) &&
        Objects.equals(this.attendDate, matchResponse.attendDate) &&
        Objects.equals(this.createdDate, matchResponse.createdDate) &&
        Objects.equals(this.updatedDate, matchResponse.updatedDate) &&
        Objects.equals(this.team, matchResponse.team) &&
        Objects.equals(this.stadium, matchResponse.stadium);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchId, otherTeamName, home, notice, status, matchDate, voteDate, attendDate, createdDate, updatedDate, team, stadium);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchResponse {\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    otherTeamName: ").append(toIndentedString(otherTeamName)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    notice: ").append(toIndentedString(notice)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    matchDate: ").append(toIndentedString(matchDate)).append("\n");
    sb.append("    voteDate: ").append(toIndentedString(voteDate)).append("\n");
    sb.append("    attendDate: ").append(toIndentedString(attendDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    stadium: ").append(toIndentedString(stadium)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchId");
    openapiFields.add("otherTeamName");
    openapiFields.add("home");
    openapiFields.add("notice");
    openapiFields.add("status");
    openapiFields.add("matchDate");
    openapiFields.add("voteDate");
    openapiFields.add("attendDate");
    openapiFields.add("createdDate");
    openapiFields.add("updatedDate");
    openapiFields.add("team");
    openapiFields.add("stadium");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MatchResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MatchResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchResponse is not found in the empty JSON string", MatchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MatchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("otherTeamName") != null && !jsonObj.get("otherTeamName").isJsonNull()) && !jsonObj.get("otherTeamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherTeamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherTeamName").toString()));
      }
      if ((jsonObj.get("notice") != null && !jsonObj.get("notice").isJsonNull()) && !jsonObj.get("notice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notice").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `matchDate`
      if (jsonObj.get("matchDate") != null && !jsonObj.get("matchDate").isJsonNull()) {
        MatchDate.validateJsonObject(jsonObj.getAsJsonObject("matchDate"));
      }
      // validate the optional field `voteDate`
      if (jsonObj.get("voteDate") != null && !jsonObj.get("voteDate").isJsonNull()) {
        VoteDate.validateJsonObject(jsonObj.getAsJsonObject("voteDate"));
      }
      // validate the optional field `attendDate`
      if (jsonObj.get("attendDate") != null && !jsonObj.get("attendDate").isJsonNull()) {
        AttendDate.validateJsonObject(jsonObj.getAsJsonObject("attendDate"));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        TeamResponse.validateJsonObject(jsonObj.getAsJsonObject("team"));
      }
      // validate the optional field `stadium`
      if (jsonObj.get("stadium") != null && !jsonObj.get("stadium").isJsonNull()) {
        StadiumResponse.validateJsonObject(jsonObj.getAsJsonObject("stadium"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchResponse>() {
           @Override
           public void write(JsonWriter out, MatchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchResponse
  * @throws IOException if the JSON string is invalid with respect to MatchResponse
  */
  public static MatchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchResponse.class);
  }

 /**
  * Convert an instance of MatchResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

