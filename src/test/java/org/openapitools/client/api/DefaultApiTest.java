/*
 * chuk_check_core API
 * chuk_check_core API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttendCreateRequest;
import org.openapitools.client.model.AttendResponse;
import org.openapitools.client.model.AttendUpdateRequest;
import org.openapitools.client.model.MatchCreateRequest;
import org.openapitools.client.model.MatchResponse;
import org.openapitools.client.model.MatchUpdateRequest;
import org.openapitools.client.model.MemberCreateRequest;
import org.openapitools.client.model.MemberResponse;
import org.openapitools.client.model.PlayerCreateRequest;
import org.openapitools.client.model.PlayerResponse;
import org.openapitools.client.model.PlayerUpdateRequest;
import org.openapitools.client.model.RegionCreateRequest;
import org.openapitools.client.model.RegionResponse;
import org.openapitools.client.model.SnsCreateRequest;
import org.openapitools.client.model.SnsResponse;
import org.openapitools.client.model.StadiumCreateRequest;
import org.openapitools.client.model.StadiumResponse;
import org.openapitools.client.model.TeamCreateRequest;
import org.openapitools.client.model.TeamResponse;
import org.openapitools.client.model.TeamUpdateRequest;
import org.openapitools.client.model.TokenCreateRequest;
import org.openapitools.client.model.TokenResponse;
import org.openapitools.client.model.VoteCreateRequest;
import org.openapitools.client.model.VoteResponse;
import org.openapitools.client.model.VoteUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * POST api/v1/auth/access-token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessTokenTest() throws ApiException {
        TokenCreateRequest tokenCreateRequest = null;
        TokenResponse response = api.accessToken(tokenCreateRequest);
        // TODO: test validations
    }

    /**
     * POST api/v1/attend
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attendCreateTest() throws ApiException {
        AttendCreateRequest attendCreateRequest = null;
        AttendResponse response = api.attendCreate(attendCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/attend/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attendReadTest() throws ApiException {
        Long id = null;
        AttendResponse response = api.attendRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/attend
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attendReadAllTest() throws ApiException {
        List<AttendResponse> response = api.attendReadAll();
        // TODO: test validations
    }

    /**
     * PUT api/v1/attend/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attendUpdateTest() throws ApiException {
        Long id = null;
        AttendUpdateRequest attendUpdateRequest = null;
        AttendResponse response = api.attendUpdate(id, attendUpdateRequest);
        // TODO: test validations
    }

    /**
     * POST api/v1/match
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchCreateTest() throws ApiException {
        MatchCreateRequest matchCreateRequest = null;
        MatchResponse response = api.matchCreate(matchCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/match/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchReadTest() throws ApiException {
        Long id = null;
        MatchResponse response = api.matchRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/match
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchReadAllTest() throws ApiException {
        List<MatchResponse> response = api.matchReadAll();
        // TODO: test validations
    }

    /**
     * PUT api/v1/match/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matchUpdateTest() throws ApiException {
        Long id = null;
        MatchUpdateRequest matchUpdateRequest = null;
        MatchResponse response = api.matchUpdate(id, matchUpdateRequest);
        // TODO: test validations
    }

    /**
     * POST api/v1/member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void memberCreateTest() throws ApiException {
        MemberCreateRequest memberCreateRequest = null;
        MemberResponse response = api.memberCreate(memberCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/member/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void memberReadTest() throws ApiException {
        Long id = null;
        MemberResponse response = api.memberRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/member
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void memberReadAllTest() throws ApiException {
        List<MemberResponse> response = api.memberReadAll();
        // TODO: test validations
    }

    /**
     * POST api/v1/player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerCreateTest() throws ApiException {
        PlayerCreateRequest playerCreateRequest = null;
        PlayerResponse response = api.playerCreate(playerCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/player/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerReadTest() throws ApiException {
        Long id = null;
        PlayerResponse response = api.playerRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/player
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerReadAllTest() throws ApiException {
        List<PlayerResponse> response = api.playerReadAll();
        // TODO: test validations
    }

    /**
     * PUT api/v1/player/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerUpdateTest() throws ApiException {
        Long id = null;
        PlayerUpdateRequest playerUpdateRequest = null;
        PlayerResponse response = api.playerUpdate(id, playerUpdateRequest);
        // TODO: test validations
    }

    /**
     * POST api/v1/auth/refresh-token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws ApiException {
        TokenResponse response = api.refreshToken();
        // TODO: test validations
    }

    /**
     * GET api/v1/region
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regionReadAllTest() throws ApiException {
        List<RegionResponse> response = api.regionReadAll();
        // TODO: test validations
    }

    /**
     * POST api/v1/region
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regionReateTest() throws ApiException {
        RegionCreateRequest regionCreateRequest = null;
        RegionResponse response = api.regionReate(regionCreateRequest);
        // TODO: test validations
    }

    /**
     * POST api/v1/sns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void snsCreateTest() throws ApiException {
        SnsCreateRequest snsCreateRequest = null;
        SnsResponse response = api.snsCreate(snsCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/sns/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void snsReadTest() throws ApiException {
        Long id = null;
        SnsResponse response = api.snsRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/sns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void snsReadAllTest() throws ApiException {
        List<SnsResponse> response = api.snsReadAll();
        // TODO: test validations
    }

    /**
     * POST api/v1/stadium
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumCreateTest() throws ApiException {
        StadiumCreateRequest stadiumCreateRequest = null;
        StadiumResponse response = api.stadiumCreate(stadiumCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/stadium/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumReadTest() throws ApiException {
        Long id = null;
        StadiumResponse response = api.stadiumRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/stadium
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stadiumReadAllTest() throws ApiException {
        List<StadiumResponse> response = api.stadiumReadAll();
        // TODO: test validations
    }

    /**
     * POST api/v1/team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamCreateTest() throws ApiException {
        TeamCreateRequest teamCreateRequest = null;
        TeamResponse response = api.teamCreate(teamCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/team/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamReadTest() throws ApiException {
        Long id = null;
        TeamResponse response = api.teamRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamReadAllTest() throws ApiException {
        List<TeamResponse> response = api.teamReadAll();
        // TODO: test validations
    }

    /**
     * PUT api/v1/team/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamUpdateTest() throws ApiException {
        Long id = null;
        TeamUpdateRequest teamUpdateRequest = null;
        TeamResponse response = api.teamUpdate(id, teamUpdateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/member/{id}/teams
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsTest() throws ApiException {
        Long id = null;
        List<TeamResponse> response = api.teams(id);
        // TODO: test validations
    }

    /**
     * POST api/v1/vote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voteCreateTest() throws ApiException {
        VoteCreateRequest voteCreateRequest = null;
        VoteResponse response = api.voteCreate(voteCreateRequest);
        // TODO: test validations
    }

    /**
     * GET api/v1/vote/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voteReadTest() throws ApiException {
        Long id = null;
        VoteResponse response = api.voteRead(id);
        // TODO: test validations
    }

    /**
     * GET api/v1/vote
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voteReadAllTest() throws ApiException {
        List<VoteResponse> response = api.voteReadAll();
        // TODO: test validations
    }

    /**
     * PUT api/v1/vote/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voteUpdateTest() throws ApiException {
        Long id = null;
        VoteUpdateRequest voteUpdateRequest = null;
        VoteResponse response = api.voteUpdate(id, voteUpdateRequest);
        // TODO: test validations
    }

}
